#!/usr/bin/env bash

mapfile -t items
shopt -s checkwinsize
exec 6>&1 < /dev/tty > /dev/tty

trap 'printf "\e[H%*s\e8\e[?7h" "$COLUMNS" ""' EXIT
trap '(( max_items = starting )); break' WINCH

printf '\e7\e[?7l'
while true; do
	[[ ${text_cache-${text}x} != "$text" ]] && {
		unset sel max_items exact prefix substring

		for item in "${items[@]}"; do
			case $item in
				$text)		exact+=("$item") ;;
				$text*)		prefix+=("$item") ;;
				*$text*)	substring+=("$item") ;;
				*)		continue ;;
			esac

			(( ${#item} > longest )) && longest=${#item}
		done

		matches=("${exact[@]}" "${prefix[@]}" "${substring[@]}")
		starting=(0 0)
	}

	(:)
	printf '\e[?25l\e[H\e[30;41m %s%*s\e[m' \
		"$text" \
		$(( longest - ${#text} + 4 )) "${starting[2]:+<} "

	(( starting == max_items )) && {
		unset length max_items
		(( length += longest + 5 ))
		(( max_items += starting ))

		for (( i = starting; i < ${#matches[@]}; i++ )); do
			if (( length < COLUMNS - ${#matches[i]} - 7 )); then
				(( length += ${#matches[i]} + 2 ))
				(( max_items++ ))
			else
				printf '\e[30;41m\e[;%sH%*s\e[;%sH%s\n\e[m' \
					$(( COLUMNS - (COLUMNS - length) )) \
					$(( COLUMNS - length )) "" \
					$(( COLUMNS - 1 )) "> "
				(( length = COLUMNS ))
				break
			fi
		done

		(( sel >= max_items )) && {
			(( starting = max_items ))
			continue
		}
	}

	[[ -n ${matches[*]} ]] && {
		printf '\e[;%sH' $(( longest - ${#text} + 6 ))
		matches[sel]=$'\e[m\e[D\e[1;37;7m '${matches[sel]}
		printf '\e[30;41m %s \e[m' \
			"${matches[@]:starting:max_items-starting}"
		matches[sel]=${matches[sel]#$'\e[m\e[D\e[1;37;7m '}
	}

	printf '\e[30;41m%*s\e[m\e[?25h\e[;%sH' \
		$(( COLUMNS - length )) "" \
		$(( ${#text} + 2 ))

	until read -t 0.05 -rsn 1; do :; done

	(( max_items == starting )) && continue

	if [[ $REPLY == $'\e' ]]; then
		read -t 0.01 -rsn 2 key
		key=${REPLY}${key}
	else
		key=$REPLY
	fi

	text_cache=$text

	case $key in
		"" | $'\r')
			printf '\e8'
			if (( ${#matches[@]} )); then
				printf '%s\n' "${matches[sel]}"
			else
				printf '%s\n' "$text"
			fi >&6
			printf '\e7'
			break
			;;
		$'\e')
			exit
			;;
		$'\e[D' | $'\e[A')
			(( sel > 0 && sel-- && sel == starting - 1 )) && {
				starting[0]=${starting[${#starting[@]}-2]}
				unset starting[${#starting[@]}-1]
				(( max_items = starting ))
			}
			;;
		$'\e[C' | $'\e[B')
			((
				sel < ${#matches[@]} - 1 &&
				sel++ &&
				sel == max_items &&
				max_items < ${#items[@]}
			)) && {
				starting[${#starting[@]}]=$max_items
				starting[0]=$max_items
			}
			;;
		$'\177' | $'\b')
			text=${text%?}
			;;
		$'\t')
			text=${matches[sel]}
			;;
		*)
			text+=$key
			;;
	esac
done
